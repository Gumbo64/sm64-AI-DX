diff --git a/Makefile b/Makefile
index 2c433f04..c7ba7c71 100644
--- a/Makefile
+++ b/Makefile
@@ -39,7 +39,7 @@ TEXTURE_FIX ?= 0
 # Enable level texture enhancements by default (Castle Grounds and Castle Courtyard recolorable texture hills)
 ENHANCE_LEVEL_TEXTURES ?= 1
 # Enable Discord Game SDK (used for Discord invites)
-DISCORD_SDK ?= 1
+DISCORD_SDK ?= 0
 # Enable CoopNet SDK (used for CoopNet server hosting)
 COOPNET ?= 1
 # Enable docker build workarounds
@@ -97,6 +97,10 @@ EXTRA_CFLAGS ?=
 EXTRA_CPP_FLAGS ?=
 EXTRA_CFLAGS += -Wno-format-security -Wno-trigraphs
 
+ifndef UNSHARED_FILE
+  EXTRA_CFLAGS += -shared -lm -fPIC
+endif
+
 dev:; @$(MAKE) DEVELOPMENT=1
 
 # COMPILER - selects the C compiler to use
@@ -732,6 +736,11 @@ else
 endif
 
 
+ifndef UNSHARED_FILE
+  TARGET_CFLAGS += -shared -lm -fPIC
+endif
+
+
 INCLUDE_DIRS := include $(BUILD_DIR) $(BUILD_DIR)/include src .
 ifeq ($(TARGET_N64),1)
   INCLUDE_DIRS += include/libc
@@ -839,6 +848,12 @@ else # C compiler options for N64
   endif
 endif
 
+ifndef UNSHARED_FILE
+  CFLAGS += -shared -lm -fPIC
+endif
+
+
+
 ifeq ($(TARGET_N64),1)
   ASFLAGS     := -march=vr4300 -mabi=32 $(foreach i,$(INCLUDE_DIRS),-I$(i)) $(foreach d,$(DEFINES),--defsym $(d))
   RSPASMFLAGS := $(foreach d,$(DEFINES),-definelabel $(subst =, ,$(d)))
@@ -910,6 +925,11 @@ endif
 # Zlib
 LDFLAGS += -lz
 
+ifndef UNSHARED_FILE
+  LDFLAGS += -shared -lm -fPIC
+endif
+
+
 # Update checker library
 ifeq ($(WINDOWS_BUILD),1)
   LDFLAGS += -lwininet
diff --git a/src/game/game_init.c b/src/game/game_init.c
index b1ffd654..6fd92e18 100644
--- a/src/game/game_init.c
+++ b/src/game/game_init.c
@@ -597,7 +597,7 @@ void game_loop_one_iteration(void) {
 
     audio_game_loop_tick();
     config_gfx_pool();
-    read_controller_inputs();
+    // read_controller_inputs();
     levelCommandAddr = level_script_execute(levelCommandAddr);
     display_and_vsync();
 
diff --git a/src/pc/pc_main.c b/src/pc/pc_main.c
index f452c0d8..b2145826 100644
--- a/src/pc/pc_main.c
+++ b/src/pc/pc_main.c
@@ -179,31 +179,31 @@ void produce_interpolation_frames_and_delay(void) {
     if (fabs(sFrameTargetTime - curTime) > 1) { sFrameTargetTime = curTime - 0.01f; }
 
     // interpolate and render
-    while ((curTime = clock_elapsed_f64()) < sFrameTargetTime) {
-        gfx_start_frame();
-        f32 delta = ((!configUncappedFramerate && configFrameLimit == FRAMERATE)
-            ? 1.0f
-            : MAX(MIN((curTime - sFrameTimeStart) / (sFrameTargetTime - sFrameTimeStart), 1.0f), 0.0f)
-        );
-        gRenderingDelta = delta;
-        if (!gSkipInterpolationTitleScreen) { patch_interpolations(delta); }
-        send_display_list(gGfxSPTask);
-        gfx_end_frame();
-
-        // delay
-        if (!configUncappedFramerate) {
-            f64 targetDelta = 1.0 / (f64) configFrameLimit;
-            f64 now = clock_elapsed_f64();
-            f64 actualDelta = now - curTime;
-            if (actualDelta < targetDelta) {
-                f64 delay = ((targetDelta - actualDelta) * 1000.0);
-                if (delay > 0.0f) { WAPI.delay((u32) delay); }
-            }
-        }
+    // while ((curTime = clock_elapsed_f64()) < sFrameTargetTime) {
+    gfx_start_frame();
+    f32 delta = ((!configUncappedFramerate && configFrameLimit == FRAMERATE)
+        ? 1.0f
+        : MAX(MIN((curTime - sFrameTimeStart) / (sFrameTargetTime - sFrameTimeStart), 1.0f), 0.0f)
+    );
+    gRenderingDelta = delta;
+    if (!gSkipInterpolationTitleScreen) { patch_interpolations(delta); }
+    send_display_list(gGfxSPTask);
+    gfx_end_frame();
 
-        frames++;
+    // delay
+    if (!configUncappedFramerate) {
+        f64 targetDelta = 1.0 / (f64) configFrameLimit;
+        f64 now = clock_elapsed_f64();
+        f64 actualDelta = now - curTime;
+        if (actualDelta < targetDelta) {
+            f64 delay = ((targetDelta - actualDelta) * 1000.0);
+            if (delay > 0.0f) { WAPI.delay((u32) delay); }
+        }
     }
 
+    frames++;
+    // }
+
     static u64 sFramesSinceFpsUpdate = 0;
     static u64 sLastFpsUpdateTime = 0;
 
@@ -458,21 +458,82 @@ int main(int argc, char *argv[]) {
     } else {
         network_init(NT_NONE, false);
     }
+    return 0;
+}
 
-    // main loop
-    while (true) {
-        debug_context_reset();
-        CTX_BEGIN(CTX_FRAME);
-        WAPI.main_loop(produce_one_frame);
+void step_game(void) {
+    debug_context_reset();
+    CTX_BEGIN(CTX_FRAME);
+    WAPI.main_loop(produce_one_frame);
 #ifdef DISCORD_SDK
-        discord_update();
+    discord_update();
 #endif
 #ifdef DEBUG
-        fflush(stdout);
-        fflush(stderr);
+    fflush(stdout);
+    fflush(stderr);
 #endif
-        CTX_END(CTX_FRAME);
+    CTX_END(CTX_FRAME);
+}
+
+void set_controller(int playerIndex, int stickX, int stickY, 
+    int buttonA, int buttonB, int buttonX, int buttonY,
+    int buttonL, int buttonR, int buttonZ, int buttonStart,
+    int buttonDU, int buttonDL, int buttonDR, int buttonDD,
+    int buttonCU, int buttonCL, int buttonCR, int buttonCD
+) {
+    struct Controller *controller = &gControllers[playerIndex];
+
+    controller->rawStickX = stickX;
+    controller->rawStickY = stickY;
+
+    controller->controllerData->button = 0;
+    controller->controllerData->button |= buttonA ? A_BUTTON : 0;
+    controller->controllerData->button |= buttonB ? B_BUTTON : 0;
+    controller->controllerData->button |= buttonX ? X_BUTTON : 0;
+    controller->controllerData->button |= buttonY ? Y_BUTTON : 0;
+    controller->controllerData->button |= buttonL ? L_TRIG : 0;
+    controller->controllerData->button |= buttonR ? R_TRIG : 0;
+    controller->controllerData->button |= buttonZ ? Z_TRIG : 0;
+    controller->controllerData->button |= buttonStart ? START_BUTTON : 0;
+    controller->controllerData->button |= buttonDU ? U_JPAD : 0;
+    controller->controllerData->button |= buttonDL ? L_JPAD : 0;
+    controller->controllerData->button |= buttonDR ? R_JPAD : 0;
+    controller->controllerData->button |= buttonDD ? D_JPAD : 0;
+    controller->controllerData->button |= buttonCU ? U_CBUTTONS : 0;
+    controller->controllerData->button |= buttonCL ? L_CBUTTONS : 0;
+    controller->controllerData->button |= buttonCR ? R_CBUTTONS : 0;
+    controller->controllerData->button |= buttonCD ? D_CBUTTONS : 0;
+
+    if ( controller->rawStickX != 0 && controller->rawStickY != 0){
+        controller->controllerData->button |= INPUT_NONZERO_ANALOG;
     }
 
-    return 0;
+    controller->buttonPressed = controller->controllerData->button
+                    & (controller->controllerData->button ^ controller->buttonDown);
+
+    controller->buttonDown = controller->controllerData->button;
+
+    adjust_analog_stick(controller);
+}
+
+struct MarioState *get_mario_state(int index) {
+    return &gMarioStates[index];
+}
+
+struct NetworkPlayer *get_network_player(int index) {
+    return &gNetworkPlayers[index];
 }
+
+int local_index_to_global(int index) {
+    return gNetworkPlayers[index].globalIndex;
+    // test
+}
+
+int global_index_to_local(int index) {
+    for (int i = 0; i < MAX_PLAYERS; i++) {
+        if (gNetworkPlayers[i].globalIndex == index) {
+            return i;
+        }
+    }
+    return -1;
+} 
